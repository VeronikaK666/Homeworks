# Задача "Банковские операции":
# Необходимо создать класс Bank со следующими свойствами:

from random import randint
from threading import Thread, Lock  # lock - объект класса Lock для блокировки потоков.
from time import sleep


class Bank:
    def __init__(self, balance: int = 0, lock: Lock = Lock()):
        self.balance = balance  # Атрибут balance - баланс банка (int)
        self.lock = lock


# Метод deposit:
# Будет совершать 100 транзакций пополнения средств.
# Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
# Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(), то разблокировать его методом release.
# После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
# Также после всех операций поставьте ожидание в 0.001 секунды, тем самым имитируя скорость выполнения пополнения.

    def deposit(self):
        for _ in range(100):
            transfer = randint(50, 500)
            self.balance += transfer
            print(f'Пополнение: {transfer}. Баланс: {self.balance}.')
            if self.balance >= 500 and self.lock.locked():
                self.lock.release()
            sleep(0.001)  # имитация скорости выполнения пополнения

# Метод take:
# Будет совершать 100 транзакций снятия.
# Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
# В начале должно выводится сообщение "Запрос на <случайное число>".
# Далее производится проверка: если случайное число меньше или равно текущему балансу,
# то произвести снятие, уменьшив balance на соответствующее число и вывести на экран "Снятие: <случайное число>.
# Баланс: <текущий баланс>".
# Если случайное число оказалось больше баланса, то вывести строку "Запрос отклонён,
# недостаточно средств" и заблокировать поток методом acquiere.

    def take(self):
        for _ in range(100):
            transfer = randint(50, 500)
            print(f'Запрос на {transfer}')
            if transfer <= self.balance:
                self.balance -= transfer
            print(f'Снятие: {transfer}. Баланс: {self.balance}.')
        else:
            print('Запрос отклонён, недостаточно средств')
            self.lock.acquire()
        sleep(0.001)  # имитация скорости выполнения пополнения

# Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.


if __name__ == '__main__':
    bk = Bank()

# Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank
    th1 = Thread(target=Bank.deposit, args=(bk,))
    th2 = Thread(target=Bank.take, args=(bk,))

    th1.start()
    th2.start()

    th1.join()
    th2.join()

print(f'Итоговый баланс: {bk.balance}')


# Вывод на консоль (может отличаться значениями, логика должна быть та же):
#
# Пополнение: 241. Баланс: 241
# Запрос на 174
# Снятие: 174. Баланс: 6
# Пополнение: 226. Баланс: 293
# Запрос на 421
# Запрос отклонён, недостаточно средств
# Пополнение: 133. Баланс: 426
# Запрос на 422
# Снятие: 422. Баланс: 4
# Пополнение: 150. Баланс: 154
# Запрос на 207
# Запрос отклонён, недостаточно средств
# ....
# Запрос на 431
# Снятие: 431. Баланс: 276
# Запрос на 288
# Запрос отклонён, недостаточно средств
# Итоговый баланс: 276
